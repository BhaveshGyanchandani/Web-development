import logo from './logo.svg';
import { useState } from 'react';
import './App.css';
import { CORE_CONCEPTS, EXAMPLES } from './data.js';
import { Fragment } from 'react';

// the logo is an alias which point to the logo.svg and can be used dynamically to produce output using logo instead of using path everytime.....

// note { } is used to give the dynamic output ...or something.....

// we can create a function like this and export it as sir said in example but didnt said in lec but it still works so find a hard way and use this function in below JSX format....usinf <MainGoal> </MainGoal> tag or <MainGoal /> tag
function MainGoal() {
  return <p>My main goal</p>
}

// if we want to replace LEARN REACT TO SOMETHING DIFFERENT WHENEVER WE LOAD SITE....we can do as

const des = ['Know', 'Learn', ' Develop'];
function getRandomInt(max) {
  return Math.floor(Math.random() * (max + 1));
  // randon function will five a no. b.w 0 and 1 multiply by max index of array + 1.....and then 
  // the floor function will give the leasr value generated by it...i.e 0.55 = 0
  // so that that range of it can be b/w 0 and 2 ...so that des[] can have index b.w 0 and 2 to select the name before react...
}

const descriptor = des[getRandomInt(2)];


// learn about props....instead of writing the code again we use props ( ie objects ) to pass in function to implement things dynamically

// function CoreConcept(props){
//   // here the props is an object which will contain all the data if.e key value pair of <CoreConcept key=value /> in it used in App section
//   // we can use it mutliple time and can set multiple key value pair in component used in App 
//   return 
//    <li>
//     <img src={props.image} alt="not available" />
//     <h3>TITLE is {props.Title}</h3>
//     <p>DESCRIPTION IS {props.description}</p>
//    </li>
// }

// using of props can increase the concept of reusbalitiy in JSX...we can use the same template again and again which decreases code and increases effectiveness

//we can change the function by destructuring ig thats what its called.....by using image, Title, description...the same manner they are defined in data.js CORE_CONCEPTS

function CoreConcept({ image, title, description }) {
  // {image,Title,description} shows the object destructing the feature we commonly use using { }
  return (
    <li>
      <img src={image} alt="not available" />
      <h3>TITLE is {title}</h3>
      <p>DESCRIPTION IS {description}</p>
    </li>
  );
  //we need to import CORE_CONCEPTS from data.js first....
  // they will set the image to image and other things to other ( note the manner the argument are described in function should be same as the variable defined in data.js)
}


// dk why it isnt working but check lec 44 ....it works in there....

// to create a component of button in exampls...

// function TabButton(props){
//   function handleClick(){
//     console.log("hello world");
//   }
//   return <li>
//     <button onclick={handleClick}>{props.children}
//       </button>
//       </li>
// }
//props.children wont take any ARGUMENT in <TabButton /> or <TabButton> </TabButton>  but whatever in between "<TabButton> </TabButton> " open and closing TabButton
// will be the props.children....ex...<TabButton>Component</TabButton> ....here Component will be the props.children...children is an inbuilt react thing....
// if we want ....we can use destructuring also....

// function TabButton( {label} ){ the argument taken in destrcuting should be same as the <TabButton label="" /> the "label" thing in one way tag
//   return <li><button>{props.children}</button></li>
// }

// we can also do....
function TabButton({ children, onSelect, isSelected }) {

  return (<li>
    <button className={isSelected ? 'active' : undefined} onClick={onSelect}>{children}
    </button>
  </li>
  );
}

//we want something to happen when we click the button ....in vanilla js we use todo...document.querySelector('button').addEventListiner(onclick,()=>{  }) means on clicking button an anonomous function will occur.....
// but here we can do as .....we can write a prop/property of button i.e onclick (there are many other too when we write "on")....so onclick button will have a function as a value....
// that would be like onclick={function_name} where function name is the value of the prop/property of button....dont use handleClick() inside { } bcz { } itself will execute handleClick
//as a function

function App() {
  // the useState accepts a value which is stored when the function is rendered/executed for the first Time
  // and then it returns an ARRAY with exact 2 Element...and these 2 element can be stored in a const or let variable
  // we can also use destructuting ( a standard JS feature ) to store these 2 elements into 2 seperate constants 
  // and can use any name for them
  // const [ selectedTopic , setSelectedTopic] = useState('PLEASE SELCT A TOPIC')


  // const [ selectedTopic , setSelectedTopic] = useState('components')
  // if we use 'PLEASE SELCT THE TOPIC' in useState than it would give error bcz there is nothing named as it...so we use components to show that the 
  // the components named key will have a value and it should be displayed first...but what if we want to give an o.p conditonally....i.e we use ternary operation if 


  const [selectedTopic, setSelectedTopic] = useState()
  // the value og selectedTopic is null or not bcz of value in useState then if yes or no than perform certain operation

  //   so what will happen is ..the selectedTopic will store the data snapshot of the first execution of this component...
  // if it(component) is exeectuted again then it willl give the updated value

  // the selectedTopic [counter in lecture explain image] is the current state value ( provided by react may change if the component function is executed again)
  // the setselectedTopic [ setCounter in lec] is state updating funcition ( updates the stored value and "tells" React to re-execute the component fucntion in which useState was called ) ( used to update the stored value...i.e update the selectedTopic and tells react to re-exectute the component again...bcz the COMPONENTS IN REACT ARE EXECUTED/RENDERED ONLY ONCE)
  // useState('...') [useState(0) in expalin] is the intial state value stored by react...


  function handleSelect(SelectedButton) {
    // useState(); is not allowed as it is a nested function i.e handleSelect is inside App funtion
    console.log("hello world - selected " + SelectedButton);
    setSelectedTopic(SelectedButton); // which will tell to re-exectute the component bcz of change in intial value to update it
  }

  let tabContent = "please select a topic";
  // we used a varibale to store it bcz we cannot use it as a regular value to return in jsx code..but can use {}
  if (selectedTopic) { // if selectedTopic is true then
    tabContent = (
      <div id="tab-content">
        <h3>{EXAMPLES[selectedTopic].title}</h3>
        <p>{EXAMPLES[selectedTopic].description}</p>
        <pre>
          <code>
            {EXAMPLES[selectedTopic].code}
          </code>
        </pre>
      </div>
    );
    // so we are now first setting this varibale before returing to return of JSX code below
  }
  
  function CoreConcepts(){
    return (
<section id="core-concepts">
  <h2>Core Concept</h2>
   {/* {[<h1>hello</h1> , <p> world</p>]} */}
          {/* JSX is capable of givng dyanmic output in form of array ig thats what its called */}

          {/* <CoreConcept title="component"
            description="new world"
            image={logo}
            />
            <CoreConcept title="component"
            description="new world"
            image={logo}
            />
            {/* we can create a component of it in a a file named data.js instead of writing corecomponent's title and etc again and again*/}
          {/* we can do as .... */}

          {/*  <CoreConcept Title={CORE_CONCEPTS[0].title}
            description={CORE_CONCEPTS[0].description}
            image={CORE_CONCEPTS[0].image}
            />
            <CoreConcept Title={CORE_CONCEPTS[1].title}
            description={CORE_CONCEPTS[1].description}
            image={CORE_CONCEPTS[1].image}
            />
            {/* and etc , but it will be too much writing to do so we can use destructuring in the function and use ... operator , i.e 
            <CoreConcept {...CORE_CONCEPTS[0]} />
            <CoreConcept {...CORE_CONCEPTS[1]} />
            and etc 
            */}
  <ul>
    {CORE_CONCEPTS.map((conceptItems) => (
      <CoreConcept key={conceptItems.title} {...conceptItems} />
    ))}

  </ul>
</section>
);
  
}

  return (
    // div is used as a wrapper tag for the JSX here.....bcz there have to be a wrapper element but we dont see any need of the div tag.....so we can use <> </> as the wrapper tag 
    // bcz this <> </> is recognized by react as well as we can import the " Fragment " from react.....which can also be used as a wrapper tag but it both <> </> and <Fragment></Fragment>
    // wont have any use case in styling and etc as they are only for wrapping the code ....but div could affect the code ....so thats why we will replace div with either of them...in the start..
    // if we dont put any wraaper tag it will cause error bcz we cant return multiple value ....we can return only 1 value .....thats why , bcz we have a large code
    <div>
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          {/* the logo is an alias given to logo.svg from the public so that we can change b.w logo in future and minimize the code.....we can give full path instead of it too
        in " " double quotes....in this we use { } to describe the component we use  */}
          <p>
            Edit <code>src/App.js</code> and save to reload.
          </p>
          <a
            className="App-link"
            href="https://reactjs.org"
            target="_blank"
            rel="noopener noreferrer"
          >
            {des[getRandomInt(2)]} React
            {/* here {} are used to define that inside some component ( ig JS or could be some other too) is used...like des.... its called dynamic implementation*/}
            {/* we can also do as....to summairze the code in short */}
            {descriptor} React
            {/* these things are called components i.e breaking the code in small parts and using them again and again instead of writing the whole again */}
            {/* dont know why this all not working ... */}
            <MainGoal />
          </a>

             {/* {[<h1>hello</h1> , <p> world</p>]} */}
          {/* JSX is capable of givng dyanmic output in form of array ig thats what its called */}

          {/* <CoreConcept title="component"
            description="new world"
            image={logo}
            />
            <CoreConcept title="component"
            description="new world"
            image={logo}
            />
            {/* we can create a component of it in a a file named data.js instead of writing corecomponent's title and etc again and again*/}
          {/* we can do as .... */}

          {/*  <CoreConcept Title={CORE_CONCEPTS[0].title}
            description={CORE_CONCEPTS[0].description}
            image={CORE_CONCEPTS[0].image}
            />
            <CoreConcept Title={CORE_CONCEPTS[1].title}
            description={CORE_CONCEPTS[1].description}
            image={CORE_CONCEPTS[1].image}
            />
            {/* and etc , but it will be too much writing to do so we can use destructuring in the function and use ... operator , i.e 
            <CoreConcept {...CORE_CONCEPTS[0]} />
            <CoreConcept {...CORE_CONCEPTS[1]} />
            and etc 
            */}

            {CoreConcepts}


          {/* creating a  menu bar .... */}

          <section id="examples">
            <h2>Examples</h2>
            <menu>
              {/* <TabButton onSelect={handleSelect}>Component</TabButton>
              <TabButton onSelect={handleSelect}>JSX</TabButton>
              <TabButton onSelect={handleSelect}>props</TabButton>
              <TabButton onSelect={handleSelect}>State</TabButton> */}
              {/* for desstructing we can use....
              <TabButton label="Component" /> */}

              {/* now we want to change the dynamic content which will change as the button are clicked....we can pass  */}
              {/* so we will create a prop in TabButton named onSelect which will have value as handleSelect....and since we have used TabButton
              we can have children ( which is built in by react) as well as our cutom argument i.e onSelect property/prop
              which will be the value of onClick prop of button when clicked...
              so when we click the button the value of {children , onSelect} , the value of children will change as each TabButton has different value 
              b.w their opening and closing tag...but the value of onSelect now is same i.e handleSelect....bcz of which 
              in button section the onClick will have value as "handleSelect" as onClick={onSelect} as onSelect was passed as a property/prop for TabButton component
              which will then help us in changing the dynamic content when clicked */}

              {/* but we want the different value to be outputted as when we click different button , so for it we will need to provide an identifire for each menu....
              we can use anonomous arrow function for it pointing to handleSelect function having an indentifer (argument as an identifier) for each TabButton */}
              <TabButton isSelected={selectedTopic === 'components'} onSelect={() => handleSelect('components')}>Component</TabButton>
              <TabButton isSelected={selectedTopic === 'jsx'} onSelect={() => handleSelect('jsx')}>JSX</TabButton>
              <TabButton isSelected={selectedTopic === 'props'} onSelect={() => handleSelect('props')}>props</TabButton>
              <TabButton isSelected={selectedTopic === 'state'} onSelect={() => handleSelect('state')}>State</TabButton>
              {/* so it will give selectedTopic as true if their component name is same else false o.w bcz the isSelected is checking above as
              isSelected ? ' active ' : undefined
              i.e if the selectedTopic is true for the component we clicked then do active else do undefined 
              also this active is defined in its CSS styling in index also*/}


              {/* the name in the handleSelect should be same as key in the key value pair of the EXAMPLES funciton in data.js file */}

              {/* so for each click their particular data is being outputted now ....and now we can move to change the value of dynamic content on clicking differnt TabButton 
              for it we use HOOK functionns ...i.e defing by import {useState} from 'react' where useState is a react function also called
              s hook function, hook function should be used only on top of component ...i.e function App() { useState();}
              and not inside nested function or if-else ladder or loops like....function App(){if(){useState}} is not allowed*/}


            </menu>
            {/* {selectedTopic}  */}
            {/* it is the state snapshot, the first element we  from the useState array */}
            {/* now if we click the button the dynamic content changes too onClick....
            bcz they are now exectuting the components AGAIN .....bcz intially they were only executed once.... */}

            {/* if the selectedTopic is false do.... "please selct a topic " else give that o.p*/}
            {/* {!selectedTopic ? <p>please select a topic</p> :
              <div id="tab-content">
              <h3>{EXAMPLES[selectedTopic].title}</h3>
              <p>{EXAMPLES[selectedTopic].description}</p>
              <pre>
                <code>
                {EXAMPLES[selectedTopic].code}
                </code>
              </pre>
            </div>
             } */}
            {/* but it looks bulky in main code so we will use it as a component to shorten in main code... */}

            {tabContent}
            {/* now its more simple  */}

            {/* now we want to do some styling so that we can know what tab is selected....using uss styling , add active class in the button*/}


          </section>

        </header>

      </div>
    </div>
  );
}

export default App;
