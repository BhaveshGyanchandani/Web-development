# -*- coding: utf-8 -*-
"""00_tensorflow_introductions\.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GQE65iKr_lf68kt5O2uorZv997-xwi6P
"""

import tensorflow as tf
print(tf.__version__)

scalar = tf.constant(7)
scalar

vector1 = tf.constant([2,3])
vector2 = tf.constant((2,3))
vector1 , vector2

MATRIX1 = tf.constant([[2,3]])
MATRIX2 = tf.constant((1,2,3))
MATRIX1 , MATRIX2

TENSOR1 = tf.constant(
    [
      [
      [2,3]
      ]
    ]
  )

TENSOR1

scalar.ndim , vector1.ndim , MATRIX1.ndim , TENSOR1.ndim

"""#creating tensors with `tf.Variable`

"""

changeable_tensor = tf.Variable([10,7])
unchangeable_tensor = tf.constant([10,7])
changeable_tensor , unchangeable_tensor

# changeable_tensor[0] = 7 we cannot directly change  values in tensors

changeable_tensor[0].assign(7)
changeable_tensor

# unchangeable_tensor[0].assign(7)  cannot change unchangeable tensors i.e tensor created with constant.......
# unchangeable_tensor

"""#creating random tensor"""

random_1  = tf.random.Generator.from_seed(42)
random_1 = random_1.normal(shape=(3,2))
random_1

not_shuffled = tf.constant([[10,7],[3,4],[2,5]])
not_shuffled

shuffled = tf.random.shuffle(not_shuffled) #shuffles along 1st dimension her iy is 3....we can also put seed in it
# shuffled  = tf.random.shuffle(not_shuffled , seed=42)
shuffled

# tf.random.set_seed(42) # global level random seed
# shuffled  = tf.random.shuffle(not_shuffled , seed=42) operation level random seed.....

"""# other ways to make tensors"""

ones  = tf.ones([2,3])
ones

zeros = tf.zeros([2,3])
zeros

"""#turn numpy arrays into tensors"""

import numpy as np
numpy_A = np.arange(1,25,dtype=np.int32)

tensor_A = tf.constant(numpy_A)
tensor_B = tf.constant(numpy_A , shape=(2,3,4)) # 2*3*4 = 24 , which is equal to elements of numpy_A......
numpy_A,tensor_A,tensor_B

"""## Geting info from tensors

* Shape  like its the length of all dimension of the tensor
* Rank  tensor.ndim
* Axis or Dimension  tensor[0] , tensor[:,1]
* Size  no. of elements in the tensor

# Indexing tensors
"""

#tensor can be indexed like python list

some_list = [1,2,3,4]
some_list[:2]

tensor  = tf.random.Generator.from_seed(42)
tensor = tensor.normal(shape=(2,3,4))
tensor

tensor , tensor[: , 0] # 0th from each one

tensor[0,0,0]

#to add a axis in tensor

tensor_new = tensor[...,tf.newaxis] # we can add a new axis anywhere
tensor_new , tensor_new.shape

#aternative to tf.newaxis

tf.expand_dims(tensor , axis=-1) # -1 means expand the final axis , 0 means expand the 0th axis i.e front

tensor , tf.expand_dims(tensor , axis=0) # expand the first axis

"""# manupulating tensors ( tensor operations )

+ , - , / , *
"""

ex = np.arange(1,10,1)
ex , ex+10 , ex-10 , ex*10 ,ex/10

#we can also use tenor built in functions

"""# matrix multiplication"""

ex2 = tf.random.Generator.from_seed(42)
ex2 = ex2.normal(shape=(10,1))

ex = tf.random.Generator.from_seed(42)
ex = ex.normal(shape=(1,10))
# or we can use reshape....tf.reshape(ex , shape=(1,10))

#or we can use transpose.....tf.transpose(ex)
tf.matmul(ex,ex2)

#tf.matmul(ex,tf.reshape(ex , shape=(10,1)))
#tf.matmul(ex,tf.transpose(ex))

"""#the dot product"""

tf.tensordot(ex,ex2,axes=1)

"""#type conversion"""

B = tf.constant([1.7,7.4])
D = tf.cast(B ,  dtype=tf.float16)
D , B

"""# Agregating tensors

means condensing them from multiple values to smaller amount of values
"""

#get absolute values

ex = tf.constant([-7,-10])
tf.abs(ex)

# so we can use

ex = tf.constant(np.random.randint(0,100,size=50))
tf.reduce_min(ex) , tf.reduce_max(ex) , tf.reduce_mean(ex) , tf.reduce_sum(ex)

"""#squeezing a tensor ( removing all single dimesions )"""

#crate a tensor to get started

G = tf.constant(tf.random.uniform(shape=[40]),shape=(1,1,1,1,40))
#G = tf.constant(tf.random.uniform(shape=(1,1,1,1,40)))
G

G_squeezed = tf.squeeze(G)
G_squeezed , G_squeezed.shape

"""#One-hot encoding"""

some_list  = [0,1,2,4]
tf.one_hot(some_list , depth=4) # on_value = 1 , off_value = 0
#it does on_value to 0th index of 0th array, 1st to 1st and 4th to 4th array....
#we can also change the on and off value

tf.one_hot(some_list , depth=5 , on_value="hello" , off_value="world")
#dept is used to tell number of array in (1, depth) shape

tf.math.log(tf.cast(tf.range(1,10) , dtype=tf.float32)) , tf.sqrt(tf.cast(tf.range(1,10) , dtype=tf.float32))  #sqrt and log requires non int type of value

"""if we want to calculate a price of a house and we have 3 inputs like no of room , bathroom and cars ......i.e 3 inputs.....so we need to wrap these 3 inputs in an [ ]
which will increase the shape (1,3) so we need to remove 1 dimension ( outside one) to get a single dimension output.....

the actual shape oif input is 3 but the feeding shape is 1,3 and the output shape is 1 or depend on type of output......

"""

[[0,0,0,1], # means 3 room
 [0,0,0,1], #4 bathroom
 [0,0,1,0] # 3 cars
 ]

